ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=sup_norm_normal), geom="tile") + scale_fill_gradientn(colours=rainbow(4), breaks=c(0,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=sup_norm_normal), geom="tile") + scale_fill_gradientn(colours=rainbow(4), breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile") + scale_fill_gradientn(breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile") + scale_fill_gradientn(colours=rainbow(7),breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile") + scale_fill_gradientn(fill=rainbow(7),breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile") #+ scale_fill_gradientn(fill=rainbow(7),breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile", breaks=c(0,1)) #+ scale_fill_gradientn(fill=rainbow(7),breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile", breaks=c("(0.0658,0.0683]",1)) #+ scale_fill_gradientn(fill=rainbow(7),breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile", breaks=c("(0.0658,0.0683]","(0.0709,0.0734]")) #+ scale_fill_gradientn(fill=rainbow(7),breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile") + scale_fill_gradient(breaks=c("(0.0658,0.0683]","(0.0709,0.0734]")) #+ scale_fill_gradientn(fill=rainbow(7),breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile") + scale_colour_gradient(breaks=c("(0.0658,0.0683]","(0.0709,0.0734]")) #+ scale_fill_gradientn(fill=rainbow(7),breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile") + scale_colour_gradient(aes(breaks=c("(0.0658,0.0683]","(0.0709,0.0734]"))) #+ scale_fill_gradientn(fill=rainbow(7),breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile") + scale_colour_gradient(aes(breaks=c(0,1))) #+ scale_fill_gradientn(fill=rainbow(7),breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile") + scale_colour_gradient(aes(breaks=c((0.0658,0.0683],(0.0709,0.0734]))) #+ scale_fill_gradientn(fill=rainbow(7),breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile") + scale_colour_gradient(aes(breaks=c(as.factor((0.0658,0.0683]),as.factor((0.0709,0.0734]))) #+ scale_fill_gradientn(fill=rainbow(7),breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile") + scale_colour_gradient(aes(breaks=c(as.factor("(0.0658,0.0683]"),as.factor("(0.0709,0.0734]")))) #+ scale_fill_gradientn(fill=rainbow(7),breaks=c(0,0.001,0.01))
typeof(surfaces$normal_sup_norm_quality[1])
surfaces$normal_sup_norm_quality[1]
surfaces$normal_sup_norm_quality[1][1]
surfaces$normal_sup_norm_quality[[1]]
surfaces$normal_sup_norm_quality[85]
surfaces$normal_sup_norm_quality[100]
surfaces$normal_sup_norm_quality[200]
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile") + scale_colour_gradient(data=surface, aes(breaks=c(normal_sup_norm_quality[1],normal_sup_norm_quality[200]))) #+ scale_fill_gradientn(fill=rainbow(7),breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile") + scale_colour_gradient(data=surfaces, aes(breaks=c(normal_sup_norm_quality[1],normal_sup_norm_quality[200]))) #+ scale_fill_gradientn(fill=rainbow(7),breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile") + scale_fill_gradient(data=surfaces, aes(breaks=c(normal_sup_norm_quality[1],normal_sup_norm_quality[200]))) #+ scale_fill_gradientn(fill=rainbow(7),breaks=c(0,0.001,0.01))
ggplot() + layer(data=surfaces, mapping=aes(x=n,y=p,fill=normal_sup_norm_quality), geom="tile")
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p, fill=sup_norm_normal), geom="tile")
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p, fill=sup_norm_normal), geom="tile") + scale_fill_gradient()
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p, fill=sup_norm_normal), geom="tile") + scale_fill_gradient(data=surfaces, aes(fill=sup_norm_normal))
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p, fill=sup_norm_normal), geom="tile") + scale_fill_gradient(data=surfaces, aes(fill=normal_sup_norm_quality))
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p, fill=sup_norm_normal), geom="tile") + scale_fill_gradient(data=surfaces, aes(colour=normal_sup_norm_quality))
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p, fill=sup_norm_normal), geom="tile") + scale_fill_gradient(data=surfaces, aes(colours=normal_sup_norm_quality))
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p), geom="tile") + scale_fill_gradient(data=surfaces, aes(colours=normal_sup_norm_quality))
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p), geom="tile") + scale_fill_gradient(data=surfaces, aes(colour=normal_sup_norm_quality))
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p), geom="tile") + scale_fill_gradient(data=surfaces, aes(fill=normal_sup_norm_quality))
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p), geom="tile") + scale_fill_gradient(data=surfaces, aes(fill=rainbow(7)))
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p), geom="tile") + scale_fill_gradient(aes(fill=rainbow(7)))
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p, colour=sup_norm_normal), geom="tile") + scale_fill_gradient(aes(fill=rainbow(7)))
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p, fill=sup_norm_normal), geom="tile") + scale_fill_gradient(aes(fill=rainbow(7)))
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p, fill=sup_norm_normal), geom="tile") + scale_fill_gradientn(aes(fill=rainbow(7)))
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p, fill=sup_norm_normal), geom="tile") + scale_fill_gradientn(aes(colours=rainbow(7)))
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p, fill=sup_norm_normal), geom="tile") + scale_fill_gradientn(colours=rainbow(7))
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p, fill=sup_norm_normal), geom="tile") + scale_colour_grey()
ggplot() + layer(data=surfaces, mapping=aes(x=n, y=p, fill=sup_norm_normal), geom="tile") + scale_fill_grey()
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p)) + scale_fill_grey(data=surfaces, aes(fill=sup_norm_normal)))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p)) + scale_fill_grey(data=surfaces, aes(fill=sup_norm_normal))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p)) + scale_fill_grey(aes(fill=surfaces$sup_norm_normal))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p)) + scale_fill_grey(aes(colours=surfaces$sup_norm_normal))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p)) + scale_fill_grey("sup_norm_normal")
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_grey("sup_norm_normal")
ggplot() + layer(data=surfaces, geom="point", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_grey("sup_norm_normal")
ggplot() + layer(data=surfaces, geom="point", mapping=aes(x=n, y=p, colour=sup_norm_normal)) + scale_fill_grey("sup_norm_normal")
ggplot() + layer(data=surfaces, geom="point", mapping=aes(x=n, y=p, colour=sup_norm_normal)) + scale_colour_grey("sup_norm_normal")
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_colour_grey("sup_norm_normal")
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_colour_grey("normal_sup_norm_quality")
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(0,10**(-15),10**(-14),10**(-5)))
ggplot2::guide_legend
?ggplot2::guide_legend
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality)) + guides(fill=FALSE)
+ opts(title="L1 distance between \n Poisson and Binomial"))
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality)) + guides(fill=TRUE)
+ opts(title="L1 distance between \n Poisson and Binomial"))
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality)) + guides()
+ opts(title="L1 distance between \n Poisson and Binomial"))
+ geom_tile(aes(fill=poisson_L1_quality)) + guides(breaks=c(0,1))
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality)) + guides(breaks=c(0,1))
+ opts(title="L1 distance between \n Poisson and Binomial"))
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality)) + guides(breaks=c("0","1"))
+ opts(title="L1 distance between \n Poisson and Binomial"))
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality,breaks=c("0","1")))
+ opts(title="L1 distance between \n Poisson and Binomial"))
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality),breaks=c("0","1"))
+ opts(title="L1 distance between \n Poisson and Binomial"))
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality),breaks=c("(0.638,0.659]"))
+ opts(title="L1 distance between \n Poisson and Binomial"))
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality),breaks=c("(0.638,0.659]","(0.68,0.7]"))
+ opts(title="L1 distance between \n Poisson and Binomial"))
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality),breaks=c(poisson_L1_quality[1],poisson_L1_quality[500]))
+ opts(title="L1 distance between \n Poisson and Binomial"))
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality),breaks=c("poisson_L1_quality[1]","poisson_L1_quality[500]"))
+ opts(title="L1 distance between \n Poisson and Binomial"))
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality),breaks=c("poisson_L1_quality"[1],"poisson_L1_quality"[500]))
+ opts(title="L1 distance between \n Poisson and Binomial"))
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality)) + scale_fill_gradient(breaks=c("poisson_L1_quality"[1],"poisson_L1_quality"[500]))
+ opts(title="L1 distance between \n Poisson and Binomial"))
+ geom_tile(aes(fill=poisson_L1_quality)) + scale_fill_gradient(low="red", high="purple", breaks=c("poisson_L1_quality"[1],"poisson_L1_quality"[500]))
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality)) + scale_fill_gradient(low="red", high="purple", breaks=c("poisson_L1_quality"[1],"poisson_L1_quality"[500]))
+ opts(title="L1 distance between \n Poisson and Binomial"))
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality)) + scale_fill_gradient(low="red", high="purple")
+ opts(title="L1 distance between \n Poisson and Binomial"))
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality)) + scale_colour_gradient(low="red", high="purple")
+ opts(title="L1 distance between \n Poisson and Binomial"))
rescaleVector <- function(vector) {
maximum <- max(vector)
minimum <- min(vector)
(vector-minimum)/(maximum-minimum)
}
x <- c(1,2,3)
rescaleVector(x)
rescaleVector(surfaces$L1_distance_poisson[1:10])
surfaces$L1_distance_poisson <- rescaleVector(surfaces$L1_distance_poisson)
surfaces$L1_distance_normal <- rescaleVector(surfaces$L1_distance_normal)
View(surfaces)
max(surfaces$L1_distance_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(0,10**(-15),10**(-14),10**(-5)))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=1,length.out=10))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=1,length.out=7))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=1,length.out=3))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=1,length.out=4))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_hue(colours=rainbow(7),breaks=seq(from=0,to=1,length.out=4))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_hue(breaks=seq(from=0,to=1,length.out=4))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_color_hue(breaks=seq(from=0,to=1,length.out=4))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_color_brewer(breaks=seq(from=0,to=1,length.out=4))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_brewer(breaks=seq(from=0,to=1,length.out=4))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=topo.colors(7),breaks=seq(from=0,to=1,length.out=7))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=topo.colors(7),breaks=seq(from=0,to=1,length.out=4))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=topo.colors(5),breaks=seq(from=0,to=1,length.out=4))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=topo.colors(10),breaks=seq(from=0,to=1,length.out=4))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=topo.colors(14),breaks=seq(from=0,to=1,length.out=4))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=topo.colors(14),breaks=seq(from=0,to=1,length.out=10))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=topo.colors(10),breaks=seq(from=0,to=1,length.out=10))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=topo.colors(10),breaks=seq(from=0,to=1,length.out=11))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=topo.colors(10),breaks=seq(from=0,to=1,length.out=5))
surfaces$sup_norm_normal <- rescaleVector(surfaces$sup_norm_normal)
surfaces$sup_norm_poisson <- rescaleVector(surfaces$sup_norm_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=topo.colors(10),breaks=seq(from=0,to=1,length.out=5))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=topo.colors(10),breaks=seq(from=0,to=1,length.out=5))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=topo.colors(72),breaks=seq(from=0,to=1,length.out=5))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=topo.colors(72),breaks=seq(from=0,to=1,length.out=5))
(plot_sup_norm_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=normal_sup_norm_quality)) + guides(fill=FALSE)
+ opts(title="Max distance between \n Normal and Binomial"))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=topo.colors(72),breaks=seq(from=0,to=0.25,length.out=5))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=terrain.colors(72),breaks=seq(from=0,to=0.25,length.out=5))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("red","green","blue"),breaks=seq(from=0,to=0.25,length.out=5))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("red","white","blue"),breaks=seq(from=0,to=0.25,length.out=5))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("black","grey","white"),breaks=seq(from=0,to=0.25,length.out=5))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("white","grey","black"),breaks=seq(from=0,to=0.25,length.out=5))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("white","black"),breaks=seq(from=0,to=0.25,length.out=5))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=0.25,length.out=5))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=c("black","white"),breaks=seq(from=0,to=1,length.out=5))
light yellow","brown
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(title="L1 distance between \n Poisson and Binomial"))
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(title="L1 distance between \n Poisson and Binomial")
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(title="L1 distance between \n Poisson and Binomial") + guides(fill=FALSE)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(title="L1 distance between \n Normal and Binomial") + guides(fill=FALSE)
plot_L1_poisson <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(title="L1 distance between \n Poisson and Binomial") + guides(fill=FALSE)
plot_L1_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(title="L1 distance between \n Normal and Binomial") + guides(fill=FALSE)
plot_sup_norm_poisson <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(title="Max distance between \n Poisson and Binomial")) + guides(fill=FALSE)
plot_sup_norm_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=0.25,length.out=5)) + opts(title="Max distance between \n Normal and Binomial"))
plot_L1_poisson <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(title="L1 distance between \n Poisson and Binomial") + guides(fill=FALSE)
plot_L1_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(title="L1 distance between \n Normal and Binomial") + guides(fill=FALSE)
plot_sup_norm_poisson <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(title="Max distance between \n Poisson and Binomial")) + guides(fill=FALSE)
plot_sup_norm_poisson <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(title="Max distance between \n Poisson and Binomial") + guides(fill=FALSE)
plot_sup_norm_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=0.25,length.out=5)) + opts(title="Max distance between \n Normal and Binomial")
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
source('~/Documents/Dropbox/Berkeley/STAT201A/R_related/binomial_approximation_experiment/ggplot2_arrangment_script.R')
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
plot_sup_norm_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=0.25,length.out=5)) + opts(legend.position="bottom", title="Max distance between \n Normal and Binomial")
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
plot_sup_norm_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=0.25,length.out=5)) + opts(legend.position="bottom", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
plot_sup_norm_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=0.25,length.out=5)) + opts(legend.position="bottom", title="Max distance between \n Normal and Binomial", legend.title=theme_blank(), legend.text=theme_text(position="bottom"))
plot_sup_norm_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=11)) + opts(legend.position="bottom", title="Max distance between \n Normal and Binomial", legend.title=theme_blank(), legend.text=theme_text(position="bottom"))
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
plot_sup_norm_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=11)) + opts(legend.position="bottom", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
plot_sup_norm_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=11)) + opts(grid.fill="white",legend.position="bottom", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
ggopt(grid.fill="white")
plot_sup_norm_normal <- ggplot(grid.fill="white") + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=11)) + opts(legend.position="bottom", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
plot_sup_norm_normal$grid.fill="white"
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
fix(plot_sup_norm_poisson)
plot_sup_norm_normal <- ggplot(grid.fill="white") + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=11)) + opts(panel.background=theme_rect(colour="white"),legend.position="bottom", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
plot_theme(plot_L1_normal)
theme_get()
plot_sup_norm_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=11)) + opts(panel.background=theme_rect(fill="white",colour="black"),legend.position="bottom", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
plot_sup_norm_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=11)) + opts(
+ panel.background=theme_rect(fill="white",colour="black"),
+ panel.grid.major=theme_line(colour = "grey90")
+ legend.position="bottom",
+ title="Max distance between \n Normal and Binomial",
plot_sup_norm_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=11)) + opts(
+ panel.background=theme_rect(fill="white",colour="black"),
plot_sup_norm_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=11)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),
+ legend.position="bottom",
plot_sup_norm_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=11)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="bottom", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
plot_L1_poisson <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="L1 distance between \n Poisson and Binomial") + guides(fill=FALSE)
plot_L1_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), title="L1 distance between \n Normal and Binomial") + guides(fill=FALSE)
plot_sup_norm_poisson <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="Max distance between \n Poisson and Binomial") + guides(fill=FALSE)
plot_sup_norm_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=11)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="bottom", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
plot_sup_norm_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="bottom", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
setwd
getwd()
setwd(~/Documents/Dropbox/Berkeley/STAT201A)
setwd("~/Documents/Dropbox/Berkeley/STAT201A/hw4/"
)
plot_sup_norm_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + ylim(c(0,0.5)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="bottom", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
plot_L1_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + ylim(c(0,0.5)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), title="L1 distance between \n Normal and Binomial") + guides(fill=FALSE)
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
?max
source('~/Documents/Dropbox/Berkeley/STAT201A/R_related/binomial_approximation_experiment/binomial_approximation_experiment.R')
View(surfaces)
getwd()
setwd(../)
setwd("..")
ls
ls()
dir()
setwd("./R_related/binomial_approximation_experiment/")
ls()
dir()
getwd()
setwd("../../hw4/tex/")
x <- 1
y <- 2
(x,y)
print(c(x,y))
print("("+x+"),("+y+")"))
print("("+x+"),("+y+")")
print("("+x+"),("+y+")")
?print
print(cat("(",x,"),(",y,")"))
print(cat("(",x,",",y,")"))
print(cat("(",x,",",y,")"),sep="")
print(cat("(",x,",",y,")"),sep=NA)
print(cat("(",x,",",y,")"),sep=NULL)
x
library(ggplot2)
maximum <- max(surfaces$L1_distance_poisson)
plot_L1_poisson <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=maximum,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="L1 distance between \n Poisson and Binomial")
plot_L1_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), title="L1 distance between \n Normal and Binomial")
plot_L1_normal <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=c("light yellow","brown"),breaks=seq(from=0,to=1,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), title="L1 distance between \n Normal and Binomial")
@
<<plot_sup_norm_poisson,echo=FALSE,fig=TRUE,include=FALSE>>=
pdflatex stat201a-hw4.tex
maximum <- max(surfaces$sup_norm_poisson)
plot_sup_norm_poisson <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=maximum,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="Max distance between \n Poisson and Binomial")
CMD pdflatex "./stat201a_hw4.tex"
maximum <- max(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=maximum,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="bottom", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_poisson)
plot_sup_norm_poisson <- ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=maximum,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="Max distance between \n Poisson and Binomial")
maximum <- max(surfaces$sup_norm_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=maximum,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="Max distance between \n Poisson and Binomial")
#library(ggplot2)
#library(reshape2)
#library(rgl)
#source("/home/steven/Documents/Dropbox/Berkeley/STAT201A/R_related/binomial_approximation_experiment/ggplot2_arrangment_script.R")
calculateDistance <- function(X1,X2) { #L1 distance
return(sum(abs(X1-X2)))
}
findL1DistanceOfBinomialAndPoisson <- function(n,p) {
X <- dbinom(x=0:n,size=n,prob=p) # vector of P(X=x), 0 <= x <= n
Y <- dpois(x=0:n,lambda=n*p) # vector of P(Y=x), 0 <= x <= n
return(0.5*calculateDistance(X,Y)) #scale according to definition of d(P_1,P_2)
}
findL1DistanceOfBinomialAndNormal <- function(n,p) {
X <- dbinom(x=0:n,size=n,prob=p)
Z <- ( pnorm(q=seq(from=0.5, to=n+0.5, by=1), mean=n*p, sd=sqrt(n*p*(1-p)) )
+ (-1)*pnorm(q=seq(from=-0.5,to=n-0.5,by=1), mean=n*p, sd=sqrt(n*p*(1-p)) ) )
return(0.5*calculateDistance(X,Z))
}
findSupNormOfBinomialAndPoisson <- function(n,p) {
X <- dbinom(x=0:n,size=n,prob=p)
Y <- dpois(x=0:n,lambda=n*p)
return(max(abs((X-Y))))
}
findSupNormOfBinomialAndNormal <- function(n,p) {
X <- dbinom(x=0:n,size=n,prob=p)
Z <- ( pnorm(q=seq(from=0.5, to=n+0.5, by=1), mean=n*p, sd=sqrt(n*p*(1-p)) )
+ (-1)*pnorm(q=seq(from=-0.5,to=n-0.5,by=1), mean=n*p, sd=sqrt(n*p*(1-p)) ) )
return(max(abs((X-Z))))
}
rescaleVector <- function(vector) {
maximum <- max(vector)
minimum <- min(vector)
(vector-minimum)/(maximum-minimum)
}
# set up grid
num_of_trials <- seq(from=20,to=10**3,by=10)
p_values <- seq(from=10**-16,to=0.5,length.out=length(num_of_trials))
surfaces <- expand.grid(n=num_of_trials, p=p_values, KEEP.OUT.ATTRS=FALSE)
#calculate all the distances
surfaces$L1_distance_poisson <- with(surfaces, mapply(findL1DistanceOfBinomialAndPoisson, n=n, p=p))
surfaces$sup_norm_poisson <- with(surfaces, mapply(findSupNormOfBinomialAndPoisson, n=n, p=p))
surfaces$L1_distance_normal <- with(surfaces, mapply(findL1DistanceOfBinomialAndNormal, n=n, p=p))
surfaces$sup_norm_normal <- with(surfaces, mapply(findSupNormOfBinomialAndNormal, n=n, p=p))
maximum <- max(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=maximum,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="bottom", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(28),breaks=seq(from=0,to=maximum,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="bottom", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(56),breaks=seq(from=0,to=maximum,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="bottom", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(56),breaks=seq(from=0,to=maximum,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(360),breaks=seq(from=0,to=maximum,length.out=5)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(360),breaks=seq(from=0,to=maximum,length.out=6)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(360),breaks=seq(from=0,to=maximum,length.out=8)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=maximum,length.out=8)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=maximum,length.out=7)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=maximum,length.out=7)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="Max distance between \n Poisson and Binomial")
maximum <- max(surfaces$sup_norm_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=maximum,length.out=7)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="Max distance between \n Poisson and Binomial")
maximum <- max(surfaces$L1_distance_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=maximum,length.out=7)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), title="L1 distance between \n Normal and Binomial")
library(ggplot2)
maximum <- max(surfaces$L1_distance_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=maximum,length.out=7)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="L1 distance between \n Poisson and Binomial")
?expression
maximum <- max(surfaces$L1_distance_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=maximum,length.out=8)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), title="L1 distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$L1_distance_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=rainbow(8),breaks=seq(from=0,to=maximum,length.out=8)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), title="L1 distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$L1_distance_normal)
minimum <- min(surfaces$L1_distance_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=rainbow(8),breaks=seq(from=minimum,to=maximum,length.out=8)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), title="L1 distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$L1_distance_normal)
minimum <- min(surfaces$L1_distance_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=rainbow(7)),breaks=seq(from=minimum,to=maximum,length.out=8)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), title="L1 distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$L1_distance_normal)
minimum <- min(surfaces$L1_distance_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=rainbow(7), breaks=seq(from=minimum,to=maximum,length.out=8)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), title="L1 distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$L1_distance_normal)
minimum <- min(surfaces$L1_distance_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=rainbow(7), breaks=seq(from=minimum,to=maximum,length.out=7)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), title="L1 distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$L1_distance_normal)
minimum <- min(surfaces$L1_distance_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=rainbow(14), breaks=seq(from=minimum,to=maximum,length.out=7)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), title="L1 distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$L1_distance_normal)
minimum <- min(surfaces$L1_distance_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=rainbow(3), breaks=seq(from=minimum,to=maximum,length.out=7)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), title="L1 distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$L1_distance_normal)
minimum <- min(surfaces$L1_distance_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=rainbow(10), breaks=seq(from=minimum,to=maximum,length.out=7)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), title="L1 distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$L1_distance_normal)
minimum <- min(surfaces$L1_distance_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=rainbow(7), breaks=seq(from=minimum,to=maximum,length.out=7)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), title="L1 distance between \n Normal and Binomial", legend.title=theme_blank())
library(ggplot2)
maximum <- max(surfaces$L1_distance_poisson)
minimum <- min(surfaces$L1_distance_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=0,to=maximum,length.out=8)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="L1 distance between \n Poisson and Binomial", legend.title=theme_blank())
library(ggplot2)
maximum <- max(surfaces$L1_distance_poisson)
minimum <- min(surfaces$L1_distance_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=minimum,to=maximum,length.out=7)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="L1 distance between \n Poisson and Binomial", legend.title=theme_blank())
library(ggplot2)
maximum <- max(surfaces$L1_distance_poisson)
minimum <- min(surfaces$L1_distance_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=minimum,to=.111,length.out=7)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="L1 distance between \n Poisson and Binomial", legend.title=theme_blank())
library(ggplot2)
maximum <- max(surfaces$L1_distance_poisson)
minimum <- min(surfaces$L1_distance_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=seq(from=minimum,to=.1,length.out=10)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="L1 distance between \n Poisson and Binomial", legend.title=theme_blank())
library(ggplot2)
maximum <- max(surfaces$L1_distance_poisson)
minimum <- min(surfaces$L1_distance_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.1,length.out=6),.2) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="L1 distance between \n Poisson and Binomial", legend.title=theme_blank())
)
library(ggplot2)
maximum <- max(surfaces$L1_distance_poisson)
minimum <- min(surfaces$L1_distance_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.1,length.out=6),.2)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="L1 distance between \n Poisson and Binomial", legend.title=theme_blank())
library(ggplot2)
maximum <- max(surfaces$L1_distance_poisson)
minimum <- min(surfaces$L1_distance_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.1,length.out=6),.111)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="L1 distance between \n Poisson and Binomial", legend.title=theme_blank())
library(ggplot2)
maximum <- max(surfaces$L1_distance_poisson)
minimum <- min(surfaces$L1_distance_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.1,length.out=6),.14)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="L1 distance between \n Poisson and Binomial", legend.title=theme_blank())
library(ggplot2)
maximum <- max(surfaces$L1_distance_poisson)
minimum <- min(surfaces$L1_distance_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.1,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="L1 distance between \n Poisson and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$L1_distance_normal)
minimum <- min(surfaces$L1_distance_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=L1_distance_normal)) + scale_fill_gradientn(colours=rainbow(7), breaks=c(seq(from=minimum,to=.1,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), title="L1 distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_poisson)
minimum <- min(surfaces$sup_norm_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.1,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="Max distance between \n Poisson and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_poisson)
minimum <- min(surfaces$sup_norm_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.001,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="Max distance between \n Poisson and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_poisson)
minimum <- min(surfaces$sup_norm_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.01,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="Max distance between \n Poisson and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_poisson)
minimum <- min(surfaces$sup_norm_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.02,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="Max distance between \n Poisson and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_poisson)
minimum <- min(surfaces$sup_norm_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.018,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="Max distance between \n Poisson and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_poisson)
minimum <- min(surfaces$sup_norm_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.015,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="Max distance between \n Poisson and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.1,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surface$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.1,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surface$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=1,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surface$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.001,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surface$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.01,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surface$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.05,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surface$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.04,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surface$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.025,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.025,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.033,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.035,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.05,length.out=3),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.005,length.out=3),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.05,length.out=9),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.06,length.out=9),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.08,length.out=10),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.1,length.out=10),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.05,length.out=5),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.04,length.out=5),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.04,length.out=5),.05,.06,.07,maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.04,length.out=5),.06,.08,.1,maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.04,length.out=5),.06,.12,.1,maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surfaces$sup_norm_normal)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_normal)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.04,length.out=5),.07,.1,.13,maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"), legend.position="right", title="Max distance between \n Normal and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_poisson)
minimum <- min(surfaces$sup_norm_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.015,length.out=6),maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="Max distance between \n Poisson and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_poisson)
minimum <- min(surfaces$sup_norm_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.015,length.out=6),.03,maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="Max distance between \n Poisson and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_poisson)
minimum <- min(surfaces$sup_norm_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.015,length.out=6),.02,.03,maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="Max distance between \n Poisson and Binomial", legend.title=theme_blank())
maximum <- max(surfaces$sup_norm_poisson)
minimum <- min(surfaces$sup_norm_poisson)
ggplot() + layer(data=surfaces, geom="tile", mapping=aes(x=n, y=p, fill=sup_norm_poisson)) + scale_fill_gradientn(colours=rainbow(7),breaks=c(seq(from=minimum,to=.015,length.out=6),.02,.035,maximum)) + opts(panel.background=theme_rect(fill="white",colour="black"), panel.grid.major=theme_line(colour = "grey90"),title="Max distance between \n Poisson and Binomial", legend.title=theme_blank())

scat + geom_tile(aes(fill=dist))+
scale_colour_gradient(limits=c(min(surfaces$dist), max(surfaces$dist)), low="red", high="blue")
scat + geom_tile(aes(fill=dist))+
scale_fill_gradient(limits=c(min(surfaces$dist), max(surfaces$dist)), low="red", high="blue")
scat + geom_tile(aes(fill=error1))+
scale_fill_gradient(limits=c(min(surfaces$error1), max(surfaces$error1)), low="red", high="blue")
scat + geom_tile(aes(fill=error2))+
scale_fill_gradient(limits=c(min(surfaces$error2), max(surfaces$error2)), low="red", high="blue")
scat + geom_tile(aes(fill=error2))+
scale_fill_gradient(trans="log",limits=c(min(surfaces$error2), max(surfaces$error2)), low="red", high="blue")
quantile(surfaces$error2)
scat + geom_tile(aes(fill=error2+0.0001))+
scale_fill_gradient(trans="log",limits=c(min(surfaces$error2), max(surfaces$error2)), low="red", high="blue")
scat + geom_tile(aes(fill=error2))+
scale_fill_gradient(trans="log", low="red", high="blue")
ggplot() + geom_point(data=poisson_better, aes(x=n,y=p), color="red") + geom_point(data=poisson_significantly_better, aes(x=n,y=p), color="green")
scat + geom_tile(aes(fill=error2))+
scale_fill_gradient(trans="log", low="red", high="blue")
scat + geom_tile(aes(fill=error2))+
scale_fill_gradient(space="lab", low="red", high="blue")
scat + geom_tile(aes(fill=error2))+
scale_fill_gradient(space="Lab", low="red", high="blue")
scat + geom_tile(aes(fill=error2))+
scale_fill_gradient(space="Lab", low="red", high="white")
scat + geom_tile(aes(fill=error2))+
scale_fill_gradient(space="Lab", low="white", high="red")
scat + geom_tile(aes(fill=error2))+
scale_fill_gradientn(colour = rainbow(10))
scat + geom_tile(aes(fill=error2))+
scale_fill_gradient2()
scat + geom_tile(aes(fill=error2))+
scale_fill_gradient2(low="red", high="blue")
surfaces[surfaces$error1 < 10**-2,]$quality <- "better than .01"
surfaces[surfaces$error1 < 10**-3,]$quality <- "better than .001"
surfaces[surfaces$error1 < 10**-4,]$quality <- "better than .0001"
surfaces[surfaces$error1 < 10**-5,]$quality <- "better than .00001"
View(surfaces)
surfaces$quality <- ""
surfaces[surfaces$error1 < 10**-2,]$quality <- "better than .01"
surfaces[surfaces$error1 < 10**-3,]$quality <- "better than .001"
surfaces[surfaces$error1 < 10**-4,]$quality <- "better than .0001"
surfaces[surfaces$error1 < 10**-5,]$quality <- "better than .00001"
View(surfaces)
surfaces$quality <- "bad"
surfaces[surfaces$error1 < 10**-2,]$quality <- "better than .01"
surfaces[surfaces$error1 < 10**-3,]$quality <- "better than .001"
surfaces[surfaces$error1 < 10**-4,]$quality <- "better than .0001"
surfaces[surfaces$error1 < 10**-5,]$quality <- "better than .00001"
ggplot(data=surfaces, aes(x=n,y=p)) + geom_tile(fill=quality)
ggplot(data=surfaces, aes(x=n,y=p)) + geom_tile(aes(fill=quality)
)
surfaces$quality <- "bad"
surfaces[surfaces$error1 < 1,]$quality <- "better than 1"
surfaces[surfaces$error1 < 10**-1,]$quality <- "better than .1"
surfaces[surfaces$error1 < 10**-2,]$quality <- "better than .01"
surfaces[surfaces$error1 < 10**-3,]$quality <- "better than .001"
surfaces[surfaces$error1 < 10**-4,]$quality <- "better than .0001"
surfaces[surfaces$error1 < 10**-5,]$quality <- "better than .00001"
ggplot(data=surfaces, aes(x=n,y=p)) + geom_tile(aes(fill=quality))
surfaces$quality <- "1 < e"
surfaces[surfaces$error1 < 1,]$quality <- ".1 < e <= 1"
surfaces[surfaces$error1 < 10**-1,]$quality <- ".01 < e <= .1"
surfaces[surfaces$error1 < 10**-2,]$quality <- ".001 < e <= .01"
surfaces[surfaces$error1 < 10**-3,]$quality <- ".0001 < e <= .001"
surfaces[surfaces$error1 < 10**-4,]$quality <- ".00001 < e <= .0001"
surfaces[surfaces$error1 < 10**-5,]$quality <- " e <= .00001"
ggplot(data=surfaces, aes(x=n,y=p)) + geom_tile(aes(fill=quality))
findSupNormOfBinomialAndNormal <- function(n,p) {
X <- dbinom(x=0:n,size=n,prob=p)
Z <- ( pnorm(q=seq(from=0.5, to=n+0.5, by=1), mean=n*p, sd=sqrt(n*p*(1-p)) )
+ (-1)*pnorm(q=seq(from=-0.5,to=n-0.5,by=1), mean=n*p, sd=sqrt(n*p*(1-p)) ) )
return(max(abs((X-Z))))
}
findSupNormOfBinomialAndPoisson <- function(n,p) {
X <- dbinom(x=0:n,size=n,prob=p)
Y <- dpois(x=0:n,lambda=n*p)
return(max(abs((X-Z))))
}
View(surfaces)
library(ggplot2)
library(reshape2)
library(rgl)
calculateDistance <- function(X1,X2) { #L1 distance
return(sum(abs(X1-X2)))
}
findL1DistanceOfBinomialAndPoisson <- function(n,p) {
X <- dbinom(x=0:n,size=n,prob=p) # vector of P(X=x), 0 <= x <= n
Y <- dpois(x=0:n,lambda=n*p) # vector of P(Y=x), 0 <= x <= n
return(calculateDistance(X,Y))
}
findL1DistanceOfBinomialAndNormal <- function(n,p) {
X <- dbinom(x=0:n,size=n,prob=p)
Z <- ( pnorm(q=seq(from=0.5, to=n+0.5, by=1), mean=n*p, sd=sqrt(n*p*(1-p)) )
+ (-1)*pnorm(q=seq(from=-0.5,to=n-0.5,by=1), mean=n*p, sd=sqrt(n*p*(1-p)) ) )
return(calculateDistance(X,Z))
}
findSupNormOfBinomialAndPoisson <- function(n,p) {
X <- dbinom(x=0:n,size=n,prob=p)
Y <- dpois(x=0:n,lambda=n*p)
return(max(abs((X-Z))))
}
findSupNormOfBinomialAndNormal <- function(n,p) {
X <- dbinom(x=0:n,size=n,prob=p)
Z <- ( pnorm(q=seq(from=0.5, to=n+0.5, by=1), mean=n*p, sd=sqrt(n*p*(1-p)) )
+ (-1)*pnorm(q=seq(from=-0.5,to=n-0.5,by=1), mean=n*p, sd=sqrt(n*p*(1-p)) ) )
return(max(abs((X-Z))))
}
# set up grid
num_of_trials <- seq(from=10,to=10**3,by=10)
p_values <- seq(from=10**-16,to=1,length.out=length(num_of_trials))
surfaces <- expand.grid(n=num_of_trials, p=p_values, KEEP.OUT.ATTRS=FALSE)
surfaces$L1_distance_poisson = with(surfaces, mapply(findL1DistanceOfBinomialAndPoisson, n=n, p=p))
surfaces$L1_distance_normal = with(surfaces, mapply(findL1DistanceOfBinomialAndNormal, n=n, p=p))
surfaces$sup_norm_poisson = with(surfaces, mapply(findSupNormOfBinomialAndPoisson, n=n, p=p))
surfaces$sup_norm_normal = with(surfaces, mapply(findSupNormOfBinomialAndNormal, n=n, p=p))
findSupNormOfBinomialAndPoisson <- function(n,p) {
X <- dbinom(x=0:n,size=n,prob=p)
Y <- dpois(x=0:n,lambda=n*p)
return(max(abs((X-Y))))
}
surfaces$sup_norm_poisson = with(surfaces, mapply(findSupNormOfBinomialAndPoisson, n=n, p=p))
View(surfaces)
quantile(surfaces$sup_norm_normal)
?cut
test <- cut(x=surfaces$sup_norm_normal,breaks=10)
fix(test)
test <- cut(x=surfaces$sup_norm_normal,breaks=100)
fix(test)
test <- cut(x=surfaces$sup_norm_normal,breaks=360)
fix(test)
ggplot(data=surfaces, aes(x=n,y=p)) + geom_tile(aes(fill=L1_distance_poisson))
surfaces$poisson_L1_quality2 <- cut(x=surfaces$L1_distance_poisson, breaks=360)
View(surfaces)
ggplot(data=surfaces, aes(x=n,y=p,color=poisson_L1_quality2)) + geom_point()
ggplot(data=surfaces, aes(x=n,y=p,color=poisson_L1_quality2)) + geom_point()
ggplot(data=surfaces, aes(x=n,y=p,color=poisson_L1_quality2)) + geom_tile()
surfaces$poisson_L1_quality2 <- cut(x=surfaces$L1_distance_poisson, breaks=36)
ggplot(data=surfaces, aes(x=n,y=p,color=poisson_L1_quality2)) + geom_tile()
ggplot(data=surfaces, aes(x=n,y=p,color=poisson_L1_quality2)) + geom_point()
surfaces$poisson_L1_quality2 <- cut(x=surfaces$L1_distance_poisson, breaks=18)
ggplot(data=surfaces, aes(x=n,y=p,color=poisson_L1_quality2)) + geom_point()
surfaces$poisson_L1_quality2 <- cut(x=surfaces$L1_distance_poisson, breaks=9)
ggplot(data=surfaces, aes(x=n,y=p,color=poisson_L1_quality2)) + geom_point()
surfaces$normal_L1_quality2 <- cut(x=surfaces$L1_distance_normal, breaks=9)
ggplot(data=surfaces, aes(x=n,y=p,color=normal_L1_quality2)) + geom_point()
surfaces$normal_L1_quality2 <- cut(x=surfaces$L1_distance_normal, breaks=36)
ggplot(data=surfaces, aes(x=n,y=p,color=normal_L1_quality2)) + geom_point()
surfaces$normal_L1_quality2 <- cut(x=surfaces$L1_distance_normal, breaks=72)
ggplot(data=surfaces, aes(x=n,y=p,color=normal_L1_quality2)) + geom_point()
View(surfaces)
rm(surfaces)
num_of_trials <- seq(from=10,to=10**3,by=10)
p_values <- seq(from=10**-16,to=1,length.out=length(num_of_trials))
surfaces <- expand.grid(n=num_of_trials, p=p_values, KEEP.OUT.ATTRS=FALSE)
surfaces$L1_distance_poisson = with(surfaces, mapply(findL1DistanceOfBinomialAndPoisson, n=n, p=p))
surfaces$poisson_L1_quality <- cut(x=surfaces$L1_distance_poisson, breaks=72)
surfaces$L1_distance_normal = with(surfaces, mapply(findL1DistanceOfBinomialAndNormal, n=n, p=p))
surfaces$normal_L1_quality <- cut(x=surfaces$L1_distance_normal, breaks=72)
surfaces$sup_norm_poisson = with(surfaces, mapply(findSupNormOfBinomialAndPoisson, n=n, p=p))
surfaces$poisson_sup_norm_quality <- cut(x=surfaces$sup_norm_poisson, breaks=72)
surfaces$sup_norm_normal = with(surfaces, mapply(findSupNormOfBinomialAndNormal, n=n, p=p))
surfaces$normal_sup_norm_quality <- cut(x=surfaces$sup_norm_normal, breaks=72)
library(ggplot2)
viewport(width=0.1,height=0.1,x=0.5,y=0.5)
viewport()
source('~/Documents/Dropbox/Berkeley/STAT201A/R_related/binomial_approximation_experiment/ggplot2_arrangment_script.R')
ggplot(data=surfaces, aes(x=n,y=p)) + geom_tile(aes(col=L1_distance_poisson)) + guides(fill=FALSE)
ggplot(data=surfaces, aes(x=n,y=p)) + geom_tile(aes(col=L1_distance_poisson)) # + guides(fill=FALSE)
ggplot(data=surfaces, aes(x=n,y=p)) + geom_tile(aes(fill=L1_distance_poisson)) # + guides(fill=FALSE)
ggplot(data=surfaces, aes(x=n,y=p)) + geom_tile(aes(colour=L1_distance_poisson)) # + guides(fill=FALSE)
ggplot(data=surfaces, aes(x=n,y=p)) + geom_tile(aes(colour=poisson_L1_quality)) # + guides(fill=FALSE)
ggplot(data=surfaces, aes(x=n,y=p)) + geom_tile(aes(fill=poisson_L1_quality)) # + guides(fill=FALSE)
ggplot(data=surfaces, aes(x=n,y=p)) + geom_tile(aes(fill=poisson_L1_quality)) + guides(fill=FALSE)
arrange(plot_L1_poisson,plot_L1_normal,ncol=2)
(plot_L1_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=normal_L1_quality)) + guides(fill=FALSE))
arrange(plot_L1_poisson,plot_L1_normal,ncol=2)
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality)) + guides(fill=FALSE))
arrange(plot_L1_poisson,plot_L1_normal,ncol=2)
source('~/Documents/Dropbox/Berkeley/STAT201A/R_related/binomial_approximation_experiment/ggplot2_arrangment_script.R')
arrange(plot_L1_poisson,plot_L1_normal,ncol=2)
arrange <- function(..., nrow=NULL, ncol=NULL, as.table=FALSE) {
dots <- list(...)
n <- length(dots)
if(is.null(nrow) & is.null(ncol)) { nrow = floor(n/2) ; ncol = ceiling(n/nrow)}
if(is.null(nrow)) { nrow = ceiling(n/ncol)}
if(is.null(ncol)) { ncol = ceiling(n/nrow)}
## NOTE see n2mfrow in grDevices for possible alternative
grid.newpage()
pushViewport(viewport(layout=grid.layout(nrow,ncol) ) )
ii.p <- 1
for(ii.row in seq(1, nrow)){
ii.table.row <- ii.row
if(as.table) {ii.table.row <- nrow - ii.table.row + 1}
for(ii.col in seq(1, ncol)){
ii.table <- ii.p
if(ii.p > n) break
print(dots[[ii.table]], vp=vp.layout(ii.table.row, ii.col))
ii.p <- ii.p + 1
}
}
}
library(ggplot2)
arrange(plot_L1_poisson,plot_L1_normal,ncol=2)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
source('~/Documents/Dropbox/Berkeley/STAT201A/R_related/binomial_approximation_experiment/ggplot2_arrangment_script.R')
arrange(plot_L1_poisson,plot_L1_normal,ncol=2)
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality)) + guides(fill=FALSE)
+ opts(title="L1 distance between Poisson and Binomial"))
(plot_L1_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=normal_L1_quality)) + guides(fill=FALSE)
+ opts(title="L1 distance between Normal and Binomial"))
arrange(plot_L1_poisson,plot_L1_normal,ncol=2)
(plot_L1_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=normal_L1_quality)) + guides(fill=FALSE)
+ opts(title="L1 distance between \n Normal and Binomial"))
arrange(plot_L1_poisson,plot_L1_normal,ncol=2)
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality)) + guides(fill=FALSE)
+ opts(title="L1 distance between \n Poisson and Binomial"))
arrange(plot_L1_poisson,plot_L1_normal,ncol=2)
(plot_sup_norm_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_sup_norm_quality)) + guides(fill=FALSE)
+ opts(title="Max distance between \n Poisson and Binomial"))
(plot_sup_norm_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_sup_norm_quality)) + guides(fill=FALSE)
+ opts(title="Max distance between \n Normal and Binomial"))
arrange(plot_L1_poisson,plot_L1_normal,
+ plot_sup_norm_poisson,plot_sup_norm_normal,
+ ncol=2)
arrange(plot_L1_poisson, plot_L1_normal,
+ plot_sup_norm_poisson, plot_sup_norm_normal
+ ncol=2)
arrange(ncol=2, plot_L1_poisson, plot_L1_normal,
+ plot_sup_norm_poisson, plot_sup_norm_normal
+ )
arrange(ncol=2, plot_L1_poisson, plot_L1_normal,
+ plot_sup_norm_poisson, plot_sup_norm_normal)
(plot_sup_norm_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_sup_norm_quality)) + guides(fill=FALSE)
+ opts(title="Max distance between \n Poisson and Binomial"))
(plot_sup_norm_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_sup_norm_quality)) + guides(fill=FALSE)
+ opts(title="Max distance between \n Normal and Binomial"))
(plot_sup_norm_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=normal_sup_norm_quality)) + guides(fill=FALSE)
+ opts(title="Max distance between \n Normal and Binomial"))
arrange(ncol=2, plot_L1_poisson, plot_L1_normal,
+ plot_sup_norm_poisson, plot_sup_norm_normal)
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
(plot_sup_norm_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=normal_sup_norm_quality)) + guides(fill=TRUE)
+ opts(title="Max distance between \n Normal and Binomial"))
(plot_sup_norm_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=normal_sup_norm_quality)) # + guides(fill=TRUE)
+ opts(title="Max distance between \n Normal and Binomial"))
arrange(ncol=2, plot_L1_poisson, plot_L1_normal,
+plot_sup_norm_poisson, plot_sup_norm_normal)
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
(plot_sup_norm_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=normal_sup_norm_quality)) + guides(col=guide_legend(nrow=4)) +
+ opts(title="Max distance between \n Normal and Binomial"))
(plot_sup_norm_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=normal_sup_norm_quality)) + guides(col=guide_legend(nrow=4))
+ opts(title="Max distance between \n Normal and Binomial"))
(plot_sup_norm_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=normal_sup_norm_quality)) + guides(fill=guide_legend(nrow=4))
+ opts(title="Max distance between \n Normal and Binomial"))
(plot_sup_norm_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=normal_sup_norm_quality)) + guides(fill=guide_legend(nrow=4,ncol=4))
+ opts(title="Max distance between \n Normal and Binomial"))
(plot_sup_norm_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=normal_sup_norm_quality)) + guides(fill=guide_legend()
+ opts(title="Max distance between \n Normal and Binomial"))
)
(plot_sup_norm_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=normal_sup_norm_quality)) + guides(fill=guide_legend())
+ opts(title="Max distance between \n Normal and Binomial"))
(plot_sup_norm_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=normal_sup_norm_quality)) + guides(fill=FALSE)
+ opts(title="Max distance between \n Normal and Binomial"))
arrange(ncol=2, plot_L1_poisson, plot_L1_normal, plot_sup_norm_poisson, plot_sup_norm_normal)
View(surfaces)
??legend
?ggplot
?data.frame
?factor
d <- ggplot(data=surfaces, aes(x=n,y=p)) + stat_bin2d()
library(ggplot2)
library(reshape2)
library(rgl)
d <- ggplot(data=surfaces, aes(x=n,y=p)) + stat_bin2d()
d + stat_bin2d()
fix(d)
rm(d)
d <- ggplot(data=surfaces, aes(x=n,y=p))
d + stat_bin2d()
d <- ggplot(data=surfaces, aes(x=n,y=p))
d + stat_bin2d(fill=sup_norm_normal)
d + stat_bin2d(aes(fill=sup_norm_normal)
)
d <- ggplot(data=surfaces, aes(x=n,y=p))
d + stat_bin2d(aes(fill=surfaces$sup_norm_normal))
d <- ggplot(data=surfaces, aes(x=n,y=p))
d + stat_bin2d(aes(fill=surfaces$normal_sup_norm_quality))
d <- ggplot(data=surfaces, aes(x=n,y=p))
d + stat_bin2d(bins=30,aes(fill=surfaces$normal_sup_norm_quality))
d <- ggplot(data=surfaces, aes(x=n,y=p))
d + stat_bin2d(bins=30,aes(fill = log1p(surfaces$sup_norm_normal)))
library(ggplot2)
library(reshape2)
library(rgl)
d <- ggplot(data=surfaces, aes(x=n,y=p))
d + stat_bin2d(bins=30,aes(fill=L1_distance_normal)))
d <- ggplot(data=surfaces, aes(x=n,y=p))
d + stat_bin2d(bins=30,aes(fill=L1_distance_normal))
d + stat_bin2d(aes(fill=L1_distance_normal))
d <- ggplot(data=surfaces, aes(x=n,y=p))
d + stat_bin2d(aes(colour=L1_distance_normal))
d <- ggplot(data=surfaces, aes(x=n,y=p))
d + stat_bin2d(bin=360,aes(colour=L1_distance_normal))
d + geom_tile(aes(fill=L1_distance_normal))
d <- ggplot(data=surfaces, aes(x=n,y=p))
d + geom_tile(aes(fill=log(L1_distance_normal)))
(plot_L1_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_L1_quality)) + guides(fill=FALSE)
+ opts(title="L1 distance between \n Poisson and Binomial"))
(plot_L1_normal <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=normal_L1_quality)) + guides(fill=FALSE)
+ opts(title="L1 distance between \n Normal and Binomial"))
(plot_sup_norm_poisson <- ggplot(data=surfaces, aes(x=n,y=p))
+ geom_tile(aes(fill=poisson_sup_norm_quality)) + guides(fill=FALSE)
+ opts(title="Max distance between \n Poisson and Binomial"))
d <- ggplot(data=surfaces, aes(x=n,y=p,z=L1_distance_normal))
d + stat_contour()
d + stat_contour(bins=10)
d + stat_contour(bins=72)
d + stat_contour(bins=360)
setwd("~/Documents/Dropbox/Berkeley/STAT201A/hw4/")
R CMD Stangle stat201a_hw4.Rnw
Stangle stat201a_hw4.Rnw
?Stangle
Stangle(file="./tex/stat201a_hw4.Rnw")
library(ggplot2)
maximum <- max(surfaces$L1_distance_poisson)
minimum <- min(surfaces$L1_distance_poisson)
d <- ggplot() + layer(data=surfaces,
+ geom="tile",
+ mapping=aes(x=n, y=p,
+ fill=L1_distance_poisson))
d <- d + scale_fill_gradientn(colours=rainbow(7),
+ breaks=c(seq(from=minimum,to=.1,
+ length.out=6),maximum))
d <- d + opts(panel.background=theme_rect(fill="white",
+ colour="black"),
+ panel.grid.major=theme_line(colour = "grey90"),
+ title="L1 distance between \n Poisson and Binomial",
+ legend.title=theme_blank())
print(d)
library(ggplot2)
maximum <- max(surfaces$L1_distance_poisson)
minimum <- min(surfaces$L1_distance_poisson)
d <- ggplot() + layer(data=surfaces,
+ geom="tile",
d <- ggplot() + layer(data=surfaces, geom="tile", mapping=
+ aes(x=n, y=p, fill=L1_distance_poisson))
d <- ggplot() + layer(data=surfaces, geom="tile",
mapping= aes(x=n, y=p, fill=L1_distance_poisson))
d <- ggplot() + layer(data=surfaces, geom="tile",
mapping= aes(x=n, y=p,
fill=L1_distance_poisson))
d <- ggplot() + layer(data=surfaces, geom="tile",
mapping= aes(x=n, y=p,
fill=L1_distance_poisson))
library(ggplot2)
maximum <- max(surfaces$L1_distance_poisson)
minimum <- min(surfaces$L1_distance_poisson)
d <- ggplot() + layer(data=surfaces, geom="tile",
mapping= aes(x=n, y=p,
fill=L1_distance_poisson))
d <- d + scale_fill_gradientn(
colours=rainbow(7), breaks=c(seq(from=minimum,to=.1,
length.out=6),maximum))
d <- d + opts(
panel.background=theme_rect(fill="white", colour="black"),
panel.grid.major=theme_line(colour = "grey90"),
title="L1 distance between \n Poisson and Binomial",
legend.title=theme_blank())
print(d)
maximum <- max(surfaces$L1_distance_normal)
minimum <- min(surfaces$L1_distance_normal)
d <- ggplot() + layer(data=surfaces, geom="tile",
mapping=aes(x=n, y=p, fill=L1_distance_normal))
d <- d + scale_fill_gradientn(
colours=rainbow(7),breaks=c(seq(from=minimum,to=.1,
length.out=6),maximum))
d <- d + opts(
panel.background=theme_rect(fill="white",colour="black"),
panel.grid.major=theme_line(colour = "grey90"),
title="L1 distance between \n Normal and Binomial",
legend.title=theme_blank())
print(d)
findSupNormOfBinomialAndNormal <- function(n,p) {
X <- dbinom(x=0:n,size=n,prob=p)
Z <- ( pnorm(q=seq(from=0.5, to=n+0.5, by=1),
mean=n*p, sd=sqrt(n*p*(1-p))
) - pnorm(q=seq(from=-0.5, to=n-0.5,by=1),
mean=n*p, sd=sqrt(n*p*(1-p)) ) )
return(max(abs((X-Z))))
}
maximum <- max(surfaces$sup_norm_poisson)
minimum <- min(surfaces$sup_norm_poisson)
d <- ggplot() + layer(data=surfaces, geom="tile",
mapping=aes(x=n, y=p, fill=sup_norm_poisson))
d <- d + scale_fill_gradientn(
colours=rainbow(7),
breaks=c(seq(from=minimum,to=.015,length.out=6),.02,.035,maximum))
d <- d + opts(
panel.background=theme_rect(fill="white",colour="black"),
panel.grid.major=theme_line(colour = "grey90"),
title="Max distance between \n Poisson and Binomial",
legend.title=theme_blank())
print(d)
calculateDistance <- function(X1,X2) { #L1 distance
return(sum(abs(X1-X2)))
}
findL1DistanceOfBinomialAndPoisson <- function(n,p) {
X <- dbinom(x=0:n,size=n,prob=p) # vector of P(X=x), 0 <= x <= n
Y <- dpois(x=0:n,lambda=n*p) # vector of P(Y=x), 0 <= x <= n
return(0.5*calculateDistance(X,Y)) #scale according to definition of d(P_1,P_2)
}
findL1DistanceOfBinomialAndNormal <- function(n,p) {
X <- dbinom(x=0:n,size=n,prob=p)
Z <- ( pnorm(q=seq(from=0.5, to=n+0.5, by=1),
mean=n*p, sd=sqrt(n*p*(1-p))
) - pnorm(q=seq(from=-0.5,to=n-0.5,by=1),
mean=n*p, sd=sqrt(n*p*(1-p)) ) )
return(0.5*calculateDistance(X,Z))
}
findSupNormOfBinomialAndPoisson <- function(n,p) {
X <- dbinom(x=0:n,size=n,prob=p)
Y <- dpois(x=0:n,lambda=n*p)
return(max(abs((X-Y))))
}
findSupNormOfBinomialAndNormal <- function(n,p) {
X <- dbinom(x=0:n,size=n,prob=p)
Z <- ( pnorm(q=seq(from=0.5, to=n+0.5, by=1),
mean=n*p, sd=sqrt(n*p*(1-p))
) - pnorm(q=seq(from=-0.5, to=n-0.5,by=1),
mean=n*p, sd=sqrt(n*p*(1-p)) ) )
return(max(abs((X-Z))))
}
# set up grid
num_of_trials <- seq(from=20,to=10**3,by=10)
p_values <- seq(from=10**-16, to=0.5,
length.out=length(num_of_trials))
surfaces <- expand.grid(n=num_of_trials, p=p_values,
KEEP.OUT.ATTRS=FALSE)
#calculate all the distances
surfaces$L1_distance_poisson <- with(surfaces,mapply(
findL1DistanceOfBinomialAndPoisson, n=n, p=p))
surfaces$sup_norm_poisson <- with(surfaces, mapply(
findSupNormOfBinomialAndPoisson, n=n, p=p))
surfaces$L1_distance_normal <- with(surfaces, mapply(
findL1DistanceOfBinomialAndNormal, n=n, p=p))
surfaces$sup_norm_normal <- with(surfaces, mapply(
findSupNormOfBinomialAndNormal, n=n, p=p))
maximum <- max(surfaces$L1_distance_normal)
minimum <- min(surfaces$L1_distance_normal)
d <- ggplot() + layer(data=surfaces, geom="tile",
mapping=aes(x=n, y=p, fill=L1_distance_normal))
d <- d + scale_fill_gradientn(
colours=rainbow(7),breaks=c(seq(from=minimum,to=.1,
length.out=6),maximum))
d <- d + opts(
panel.background=theme_rect(fill="white",colour="black"),
panel.grid.major=theme_line(colour = "grey90"),
title="L1 distance between \n Normal and Binomial",
legend.title=theme_blank())
print(d)
maximum <- max(surfaces$sup_norm_poisson)
minimum <- min(surfaces$sup_norm_poisson)
d <- ggplot() + layer(data=surfaces, geom="tile",
mapping=aes(x=n, y=p, fill=sup_norm_poisson))
d <- d + scale_fill_gradientn(
colours=rainbow(7),
breaks=c(seq(from=minimum,to=.015,length.out=6),.02,.035,maximum))
d <- d + opts(
panel.background=theme_rect(fill="white",colour="black"),
panel.grid.major=theme_line(colour = "grey90"),
title="Max distance between \n Poisson and Binomial",
legend.title=theme_blank())
print(d)
maximum <- max(surfaces$sup_norm_normal)
minimum <- min(surfaces$sup_norm_normal)
d <- ggplot() + layer(data=surfaces, geom="tile",
mapping=aes(x=n, y=p, fill=sup_norm_normal))
d <- d + scale_fill_gradientn(
colours=rainbow(7),
breaks=c(seq(from=minimum,to=.04,length.out=5),.07,.1,.13,maximum))
d <- d + opts(
panel.background=theme_rect(fill="white",colour="black"),
panel.grid.major=theme_line(colour = "grey90"),
legend.position="right",
title="Max distance between \n Normal and Binomial",
legend.title=theme_blank())
print(d)
Stangle("./tex/stat201a_hw4.Rnw")

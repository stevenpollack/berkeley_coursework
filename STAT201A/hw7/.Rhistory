solution_output <- paste("\\ensuremath{", solution_output, "}", sep="")
return(c(problem_output,solution_output))
}
makeProblemNumber <- function(prb_num=1) {
beginEnv <- "\\begin{Exercise}"
problem_number <- paste("{",prb_num,"}",sep="")
endEnv <- "\\end{Exercise}"
prob_and_soln <- getProblem()
problem <- prob_and_soln[1]
solution <- prob_and_soln[2]
out1 <- paste(beginEnv, problem_number, problem, endEnv, sep="")
out2 <- paste("\\noindent\\textbf{\\#", prb_num, ".} ", solution, sep="")
return(c(out1,out2))
}
test <- mapply(prb_num=1:175, FUN=makeProblemNumber)
# test[1,] = all problem statements
# test[2,] = corresponding solutions
problems <- paste(test[1,], collapse="\\\\")
head(problems)
variables <- c("a","b","c","d","e")
potential_exponents <- (-5):5
numerator_exponents <- sample(size=length(variables),
x=potential_exponents,replace=TRUE)
denominator_exponents <- sample(size=length(variables),
x=potential_exponents,replace=TRUE)
auxillary_exponents <- sample(size=2,x=(-4):4,replace=TRUE)
# build numerator, dropping variables with 0 exponents
latex_numerator <- paste(variables[numerator_exponents!=0], "^{",
numerator_exponents[numerator_exponents!=0],
"}", sep="", collapse=" ")
exp <- sprintf("^{%d]",numerator_exponents[numerator_exponents!=0])
exp
exp <- sprintf("^{%d}",numerator_exponents[numerator_exponents!=0])
exp <- sprintf("^{%d}",numerator_exponents[numerator_exponents!=0])
exp
exp[exp =="^{1}"] <- ""
exp
latex_numerator <- paste(variables[numerator_exponents!=0],
exp, sep="", collapse=" ")
latex_numerator
numerator_exponents
2 != 1
2 ~= 1
processProduct(c("a","b"), c(1,2), 3)
processProduct <- function(vars, exponents, aux_exponent){
if(aux_exponent == 0) return("1")
else {
latex_exp <- sprintf("^{%d}",exponents[exponents!=0])
latex_exp[exp =="^{1}"] <- "" #erase "to the first" exponents
# build product, dropping variables with 0 exponents
output_string <- paste(vars[exponents!=0],
latex_exp, sep="", collapse=" ")
if(aux_exponent != 1) { #avoid wrapping   numberator in ^{1}
latex_numerator <- sprintf("\\left(%s\\right)^{%d}",
latex_numerator, aux_exponent)
} else {
return(output_string)
}
}
}
processProduct(c("a","b"), c(1,2), 3)
processProduct <- function(vars, exponents, aux_exponent){
if(aux_exponent == 0) return("1")
else {
latex_exp <- sprintf("^{%d}",exponents[exponents!=0])
latex_exp[exp =="^{1}"] <- "" #erase "to the first" exponents
# build product, dropping variables with 0 exponents
output_string <- paste(vars[exponents!=0],
latex_exp, sep="", collapse=" ")
if(aux_exponent != 1) { #avoid wrapping   numberator in ^{1}
output_string <- sprintf("\\left(%s\\right)^{%d}",
output_string, aux_exponent)
}
return(output_string)
}
}
processProduct(c("a","b"), c(1,2), 3)
processProduct <- function(vars, exponents, aux_exponent){
if(aux_exponent == 0) return("1")
else {
latex_exp <- sprintf("^{%d}",exponents[exponents!=0])
latex_exp[exp =="^{1}"] <- "" #erase "to the first" exponents
# build product, dropping variables with 0 exponents
output_string <- paste(vars[exponents!=0],
latex_exp, sep="", collapse=" ")
if(aux_exponent != 1) { #avoid wrapping   numberator in ^{1}
output_string <- sprintf("\\left( %s \\right)^{%d}",
output_string, aux_exponent)
}
return(output_string)
}
}
processProduct(c("a","b"), c(1,2), 3)
vars <- c("a","b")
exponents <- c(1,2)
aux_exponent <- 3
if(aux_exponent == 0) return("1")
else {
latex_exp <- sprintf("^{%d}",exponents[exponents!=0])
latex_exp <- sprintf("^{%d}",exponents[exponents!=0])
latex_exp[exp =="^{1}"] <- "" #erase "to the first" exponents
# build product, dropping variables with 0 exponents
output_string <- paste(vars[exponents!=0],
latex_exp, sep="", collapse=" ")
output_string
latex_exp
latex_exp <- sprintf("^{%d}", exponents[exponents!=0])
latex_exp
latex_exp[exp == "^{1}"] <- "" #erase "to the first" exponents
latex_exp[latex_exp == "^{1}"] <- "" #erase "to the first" exponents
latex_exp
latex_exp <- sprintf("^{%d}", exponents[exponents!=0])
latex_exp[latex_exp == "^{1}"] <- "" #erase "to the first" exponents
latex_exp
processProduct <- function(vars, exponents, aux_exponent){
if(aux_exponent == 0) {return("1")}
else {
latex_exp <- sprintf("^{%d}", exponents[exponents!=0])
latex_exp[latex_exp == "^{1}"] <- "" #erase "to the first" exponents
# build product, dropping variables with 0 exponents
output_string <- paste(vars[exponents!=0],
latex_exp, sep="", collapse=" ")
if(aux_exponent != 1) { #avoid wrapping   numberator in ^{1}
output_string <- sprintf("\\left( %s \\right)^{%d}",
output_string, aux_exponent)
}
return(output_string)
}
}
processProduct(c("a","b"), c(1,2), 3)
processProduct(c("a","b"), c(1,2), 0)
processProduct(c("a","b"), c(1,2), 1)
?list
p <- list()
p
p$test <- 1
p
p$test
range <- (-12):12
number_of_terms <- 2+rbinom(n=1,size=1,prob=0.5) # either 2 or 3
numerators <- sample(size=number_of_terms,x=range[range!=0],replace=TRUE)
denominators <- sample(size=number_of_terms,x=2:12,replace=TRUE)
sprintf("\\dfrac{%d}{%d}",numerators,denominators)
paste(sprintf("\\dfrac{%d}{%d}",numerators,denominators),collapse=" + ")
test <- paste(sprintf("\\dfrac{%d}{%d}",numerators,denominators),collapse=" + ")
test
gsub(pattern="(+ |)\\\\dfrac[{]-(.{1,2})[}][{](.{1,2})[}]",x=test, replacement="- \\\\drac{\\2}{\\3}")
gsub(pattern="+ \\\\dfrac[{]-(.{1,2})[}][{](.{1,2})[}]",x=test, replacement="- \\\\drac{\\2}{\\3}")
gsub(pattern="+\w\\\\dfrac[{]-(.{1,2})[}][{](.{1,2})[}]",x=test, replacement="- \\\\drac{\\2}{\\3}")
gsub(pattern="+\\w\\\\dfrac[{]-(.{1,2})[}][{](.{1,2})[}]",x=test, replacement="- \\\\drac{\\2}{\\3}")
gsub(pattern="+\\s\\\\dfrac[{]-(.{1,2})[}][{](.{1,2})[}]",x=test, replacement="- \\\\drac{\\2}{\\3}")
gsub(pattern="+\\s\\\\dfrac[{]-(.{1,2})[}][{](.{1,2})[}]",x=test, replacement=" - \\\\drac{\\2}{\\3}")
gsub(pattern="+\\s\\\\dfrac[{]-(.{1,2})[}][{](.{1,2})[}]",x=test, replacement=" - \\\\drac{\\1}{\\2}")
gsub(pattern="[/+]\\s\\\\dfrac[{]-(.{1,2})[}][{](.{1,2})[}]",x=test, replacement=" - \\\\drac{\\1}{\\2}")
gsub(pattern="[/+]\\s\\\\dfrac[{]-(.{1,2})[}][{](.{1,2})[}]",x=test, replacement="- \\\\drac{\\1}{\\2}")
gsub(pattern="([/+]\\s|)\\\\dfrac[{]-(.{1,2})[}][{](.{1,2})[}]",x=test, replacement="- \\\\drac{\\1}{\\2}")
gsub(pattern="([/+]\\s|)\\\\dfrac[{]-(.{1,2})[}][{](.{1,2})[}]",x=test, replacement="- \\\\drac{\\2}{\\3}")
gsub(pattern="([/+]\\s|)\\\\dfrac[{]-(.{1,2})[}][{](.{1,2})[}]",x="\\dfrac{-12}{7}", replacement="- \\\\drac{\\2}{\\3}")
pi
mapply(rep, times = 1:4, x = 4:1)
mapply(rep, 1:4, 4:1)
mapply(x=40,FUN=experiment,times=1:100)
experiment <- function(x=1) {
i <- 1 # iteration counter
slices <- runif(n=2,min=0,max=2*pi) # make our preliminary slices
while(max(slices)<=2*pi*(1-1/x)) {
slices <- runif(n=2,min=max(slices),max=2*pi)
i <- i+1
}
return(i)
}
results <- list()
results$100 <- mean(mapply(x=40,FUN=experiment,times=1:100))
results
mean(mapply(x=40,FUN=experiment,times=1:100))
mean(mapply(x=rep(40,times=100), FUN=experiment))
mean(sapply(x=rep(40,times=100), FUN=experiment))
mean(sapply(X=rep(40,times=100), FUN=experiment))
mean(sapply(X=rep(40,times=100), FUN=experiment))
mean(sapply(X=rep(40,times=100), FUN=experiment))
mean(sapply(X=rep(40,times=100), FUN=experiment))
experiment <- function(x=1) {
i <- 1 # iteration counter
slices <- runif(n=2,min=0,max=2*pi) # make our preliminary slices
while(max(slices)<=2*pi*(1-1/x)) {
slices <- runif(n=2,min=max(slices),max=2*pi)
i <- i+1
}
return(i)
}
results <- list()
results$100 <- mean(mapply(x=rep(40,times=100), FUN=experiment))
results$1000 <- mean(mapply(x=rep(40,times=1000), FUN=experiment))
results$10^5 <- mean(mapply(x=rep(40,times=10^5), FUN=experiment))
experiment <- function(x=1) {
i <- 1 # iteration counter
slices <- runif(n=2,min=0,max=2*pi) # make our preliminary slices
while(max(slices)<=2*pi*(1-1/x)) {
slices <- runif(n=2,min=max(slices),max=2*pi)
i <- i+1
}
return(i)
}
results <- list()
results$100 <- mean(mapply(x=rep(40,times=100), FUN=experiment))
results$1000 <- mean(mapply(x=rep(40,times=1000), FUN=experiment))
results$10\^5 <- mean(mapply(x=rep(40,times=10^5), FUN=experiment))
experiment <- function(x=1) {
i <- 1 # iteration counter
slices <- runif(n=2,min=0,max=2*pi) # make our preliminary slices
while(max(slices)<=2*pi*(1-1/x)) {
slices <- runif(n=2,min=max(slices),max=2*pi)
i <- i+1
}
return(i)
}
results <- list()
results$1e2 <- mean(mapply(x=rep(40,times=100), FUN=experiment))
results$1e3 <- mean(mapply(x=rep(40,times=1000), FUN=experiment))
results$1e5 <- mean(mapply(x=rep(40,times=10^5), FUN=experiment))
experiment <- function(x=1) {
i <- 1 # iteration counter
slices <- runif(n=2,min=0,max=2*pi) # make our preliminary slices
while(max(slices)<=2*pi*(1-1/x)) {
slices <- runif(n=2,min=max(slices),max=2*pi)
i <- i+1
}
return(i)
}
results <- list()
results$1E2 <- mean(mapply(x=rep(40,times=100), FUN=experiment))
results$1E3 <- mean(mapply(x=rep(40,times=1000), FUN=experiment))
results$1E5 <- mean(mapply(x=rep(40,times=10^5), FUN=experiment))
experiment <- function(x=1) {
i <- 1 # iteration counter
slices <- runif(n=2,min=0,max=2*pi) # make our preliminary slices
while(max(slices)<=2*pi*(1-1/x)) {
slices <- runif(n=2,min=max(slices),max=2*pi)
i <- i+1
}
return(i)
}
results <- list()
results$oneE2 <- mean(mapply(x=rep(40,times=100), FUN=experiment))
results$oneE3 <- mean(mapply(x=rep(40,times=1000), FUN=experiment))
results$oneE5 <- mean(mapply(x=rep(40,times=10^5), FUN=experiment))
experiment <- function(x=1) {
i <- 1 # iteration counter
slices <- runif(n=2,min=0,max=2*pi) # make our preliminary slices
while(max(slices)<=2*pi*(1-1/x)) {
slices <- runif(n=2,min=max(slices),max=2*pi)
i <- i+1
}
return(i)
}
results <- list()
results$oneE2 <- mean(mapply(x=rep(40,times=100), FUN=experiment))
results$oneE3 <- mean(mapply(x=rep(40,times=1000), FUN=experiment))
results$oneE5 <- mean(mapply(x=rep(40,times=10^5), FUN=experiment))
results$oneE6 <- mean(mapply(x=rep(40,times=10^6), FUN=experiment))
fix(results)
mean(c(0.5,0.25,0.25))
apropos("rounding")
apropos("round")
?round
fix(results)
10^11
results$oneE11 <- mean(mapply(x=rep(40,times=10^11), FUN=experiment))
results$oneE11 <- mean(mapply(x=rep(40,times=10^10), FUN=experiment))
results$oneE11 <- mean(mapply(x=rep(40,times=10^9), FUN=experiment))
results$oneE11 <- mean(mapply(x=rep(40,times=10^6), FUN=experiment))
fix(results)
results$oneE7 <- mean(mapply(x=rep(40,times=10^7), FUN=experiment))
options(digits=12)
results$oneE2 <- mean(mapply(x=rep(40,times=100), FUN=experiment))
results$oneE3 <- mean(mapply(x=rep(40,times=1000), FUN=experiment))
results$oneE5 <- mean(mapply(x=rep(40,times=10^5), FUN=experiment))
fix(results)
options(digits=12)
set.seed(100)
experiment <- function(x=1) {
i <- 1.0 # iteration counter
slices <- runif(n=2,min=0,max=2*pi) # make our preliminary slices
while(max(slices)<=2*pi*(1-1/x)) {
slices <- runif(n=2,min=max(slices),max=2*pi)
i <- i+1
}
return(i)
}
results <- list()
results$oneE2 <- mean(mapply(x=rep(40,times=100), FUN=experiment))
results$oneE3 <- mean(mapply(x=rep(40,times=1000), FUN=experiment))
fix(results)
results$oneE5 <- mean(mapply(x=rep(40,times=10^5), FUN=experiment))
fix(results)
results$oneE6 <- mean(mapply(x=rep(40,times=10^6), FUN=experiment))
fix(results)
\\n
\n
print("\\n")
print("\n")
sprintf("\n")
?as.character
?!
)
help("!")
library(knitr)
knit_hooks
test <- knot_hooks
test <- knit_hooks
fix(test)
knitr::opts_chunk
knitr::knit_patterns
knit_hooks$get()
environment
?environment
.GlobalEnv
ls(.GlobalEnv)
.GlobalEnv$get("results")
?get
get(envir=.GlobalEnv, x=test)
get(test, envir=.GlobalEnv)
mget(test, envir=.GlobalEnv)
mget("test", envir=.GlobalEnv)
fix(test)
statis <- 1
mget("statis", envir=.GlobalEnv)
resl <- mget("statis", envir=.GlobalEnv)
resl
resl <- get("statis", envir=.GlobalEnv)
resl
gsub(x="foo_hook$x$y", pattern="$|_", replacement="X")
gsub(x="foo_hook$x$y", pattern="[$]|_", replacement="X")
gsub(x="foo_hook$x$y", pattern="[$]|_", replacement="aa")
gsub(x="foo_hook$x$y", pattern="[$]|_", replacement="\\1")
gsub(x="foo_hook$x$y", pattern="([$])|(_)", replacement="\\1")
gsub(x="foo_hook$x$y", pattern="([$])|(_)", replacement="2\\1")
gsub(x="foo_hook$x$y", pattern="([$])|([_])", replacement="2\\1")
gsub(x="foo_hook$x$y", pattern="([$])|([_])", replacement="\\1")
gsub(x="foo_hook$x$y", pattern="([$])|([_])", replacement="\\\\1")
gsub(x="foo_hook$x$y", pattern="([$])|([_])", replacement="\\\1")
gsub(x="foo_hook$x$y", pattern="([$])|([_])", replacement="\\\\1")
gsub(x="foo_hook$x$y", pattern="([$])|([_])", replacement="\\\\")
gsub(x="foo_hook$x$y", pattern="([$])|([_])", replacement="\\1")
gsub(x="foo_hook$x$y", pattern="([$])|([/_])", replacement="\\1")
gsub(x="foo_hook$x$y", pattern="([$])|([\_])", replacement="\\1")
gsub(x="foo_hook$x$y", pattern="([$])|([/_])", replacement="\\1")
gsub(x="foo_hook$x$y", pattern="([$])|([/_])", replacement="\\\\1")
gsub(x="foo_hook$x$y", pattern="([$])|([/_])", replacement="\\ \\1")
gsub(x="foo_hook$x$y", pattern="([$])", replacement="\\ \\1")
gsub(x="foo_hook$x$y", pattern="([$])", replacement="\\\\1")
gsub(x="foo_hook$x$y", pattern="([$])", replacement="\\\\2")
gsub(x="foo_hook$x$y", pattern="([$])", replacement="\\\\3")
gsub(x="foo_hook$x$y", pattern="([$])", replacement="\\$")
gsub(x="foo_hook$x$y", pattern="([$])", replacement="\\\$")
gsub(x="foo_hook$x$y", pattern="([$])", replacement="\\\\$")
ls(.GlobalEnv)
funFun <- function(a=NA) {
x <- as.list(environment())
print("Hi Hi")
}
funFun(a)
fun
funFun
funFun()
funFun <- function(a=NA) {
x <- as.list(environment())
print(x)
}
funFun()
funFun(3)
environment(fun=NULL)
.GlobalEnv()
as.list(.GlobalEnv())
as.list(.globalenv())
as.list(globalenv())
baseenv()
as.list(baseenv())
parent.env(globalenv())
funFun <- function(a=NULL) {
x <- as.list(environment())
print(x)
}
funFun()
as.logical(NULL)
as.logical(1)
as.logical(NA)
as.logical(2)
as.logical(0)
if (a) print("TRUE")
a <= NA
a <- NA
if (a) print("TRUE")
a <- NULL
if (a) print("TRUE")
?get
get("bleh",envir=.GlobalEnv)
if (!get("bleh",envir=.GlobalEnv)) print("nn")
?tryCatch
tryCatch(a <- get("bleh",envir=.GlobalEnv), finally = a<-1)
a <- 0
tryCatch(a <- get("bleh",envir=.GlobalEnv), finally = a<-1)
try(a <- get("bleh",envir=.GlobalEnv), finally = a<-1)
try(a <- get("bleh",envir=.GlobalEnv))
try(a <- get("bleh",envir=.GlobalEnv),silent=TRUE)
resl <- 100
try(a <- get("resl",envir=.GlobalEnv),silent=TRUE)
tryCatch(a <- get("bleh",envir=.GlobalEnv), error = function(e) e, finally = a<-1)
tryCatch(a <- get("bleh",envir=.GlobalEnv), error = "error!", finally = a<-1)
tryCatch(a <- get("bleh",envir=.GlobalEnv), error = function(e) "error!", finally = a<-1)
tryCatch(a <- get("bleh",envir=.GlobalEnv), error = function(e) FALSE, finally = a<-1)
tryCatch(a <- get("bleh",envir=.GlobalEnv), error = function(e) FALSE, finally = NULL)
environment(x = 1)
globalenv()
as.list(globalenv())
environment(x) <- 1
environment("x") <- 1
x <- 1
environment("x") <- 0
environment(x) <- 0
get("x") <- 0
get("x",envir=environment()) <- 0
get("x",envir=environment <- 0
)
get("x",envir=environment) <- 0
apropos("clear")
apropos("cle*")
apropos("clea*")
apropos("clr")
apropos("console")
flush.console
clc
clc()
apropos("*console*")
apropos("*cons")
apropos("cons*")
apropos("clea*")
clear
clear()
clearNames()
gsub(pattern="[/$]", x="$ bills $", replacement="\\S")
gsub(pattern="[/$]", x="$ bills $", replacement="\\S")
gsub(pattern="[/$]", x="$ bills $", replacement="\\$")
gsub(pattern="[/$]", x="$ bills $", replacement="\\\\$")
?sprintf
y <- c(1,2,3)
as.character(y)
apropos('negative*')
apropos('*bin*')
apropos('*bin')
pnbinom(size=100,prob=0.25)
dnbinom(x=410, size=100,prob=0.25)
1-dnbinom(x=410, size=100,prob=0.25)
dnbinom(x=3, size=1,prob=1/3)
dnbinom(x=5, size=1,prob=1/3)
dnbinom(x=1:10, size=1,prob=1/3)
qnbinom(p=0.5, size=1,prob=1/3)
qnbinom(p=0.85, size=1,prob=1/3)
dnbinom(x=4, size=1,prob=1/3)
dnbinom(x=3, size=1,prob=1/3)
(1/3)+(2/3)*(1/3)+(2/3)^2*(1/3)
degom(x=3,prob=1/3)
dgeom(x=3,prob=1/3)
sum(dgeom(x=1:3,prob=1/3))
sum(dgeom(x=0:2,prob=1/3))
sum(dnbinom(x=0:2, size=1,prob=1/3))
sum(dnbinom(x=0:409, size=100,prob=1/3))
sum(dnbinom(x=0:409, size=100,prob=1/3),digits=10)
sum(dnbinom(x=0, size=100,prob=1/3))
pnbinom(q=3, size=1 ,prob=1/3))
pnbinom(q=3, size=1 ,prob=1/3)
pnbinom(q=2, size=1 ,prob=1/3)
pnbinom(q=409, size=100 ,prob=1/4)
1-pnbinom(q=409, size=100 ,prob=1/4)
(0.75)/(.25)**2
x <- .5/sqrt(.75)
pnorm(x)
1-pnorm(x)
x<- (4.10-1/p)/
)
x<- (4.10-1/p)/(sqrt(q/p**2)/10)
p <- 1/4
q <- 1-p
x<- (4.10-1/p)/(sqrt(q/p**2)/10)
1-pnorm(x)
pnbinom(q=310,size=100,p=1/4)
pnbinom(q=311,size=100,p=1/4)
1-pnbinom(q=311,size=100,p=1/4)
1-pnbinom(q=310,size=100,p=1/4)
dnbinom(x=0,size=100,p=1/4)
dnbinom(x=1,size=100,p=1/4)
(1/4)**100 * (3/4)*1
(1/4)**100 * (3/4)**0
(1/4)**100 * (3/4)**1
dnbinom(x=0:1,size=100,p=1/4)
c((1/4)**100 * (3/4)**0,choose(100,1)*(1/4)**100 * (3/4)**1)
1-dnbinom(x=0:310,size=100,p=1/4)
1-pnbinom(x=310,size=100,p=1/4)
1-pnbinom(q=310,size=100,p=1/4)
1-pnbinom(q=311,size=100,p=1/4)
1-pnbinom(q=311,size=100,p=1/4)
1-pnbinom(q=309,size=100,p=1/4)
sum(dnbinom(x=0:310,size=100,p=1/4))
1-sum(dnbinom(x=0:310,size=100,p=1/4))
1-sum(dnbinom(x=0:308,size=100,p=1/4))
xp <- (4.15 -4)/(sqrt(0.75*0.25**2)/10)
xp <- (4.15 -4)/(sqrt((0.75)*(0.25**2)/10)
)
xp <- (4.15 -4)/(sqrt((0.75)*(0.25**2))/10)
xp <- (4.15 -4)/(sqrt((0.75)/(0.25**2))/10)
1-pnorm(xp)
setwd("~/Documents/Dropbox/Berkeley/STAT201A/hw7/")
